小專程式筆記

視差滾動效果（parallax scrolling）

document.querySelectorAll('[data-speed]').forEach(el => {
  const speed = el.getAttribute('data-speed');
  el.style.transform = `translateY(${scrollY * (1 - 1 / speed)}px)`;
});

✨ 這段做的事情：
	
	找出頁面上所有有 data-speed 屬性的元素

	根據每個元素的 data-speed 值，計算它在滾動時應該位移多少

	使用 transform: translateY(...) 去移動元素產生 不同滾動速度的效果

data-speed 是什麼意思？
	
	這是一個 自訂屬性（HTML5 自定義資料屬性），用來代表元素應該以幾倍的速度滾動。

	data-speed="1" → 正常速度（不動）

	data-speed="2" → 滾動時比較慢（好像比較遠）

	data-speed="0.5" → 滾動得比視窗快（好像比較近）


例子：HTML 怎麼用
	
	<div class="layer1" data-speed="2">遠景</div>
	<div class="layer2" data-speed="1.2">中景</div>
	<div class="layer3" data-speed="0.8">近景</div>
	
	這些元素會因為 data-speed 不同，在滾動時以不同速度位移，讓你感覺像「景深分層」。

如果你想啟用這功能，你可以這樣加：
-------------------

	.bg-fuji {
	  transform: translateZ(0);
	  z-index: 1;
	}
	transform: translateZ(0);
	
		這是一個很常用的 CSS 技巧，目的是啟用硬體加速（hardware acceleration）。
		它會讓瀏覽器把這個元素搬到 GPU 上渲染，而不是只用 CPU，通常可以讓動畫或變形（transform）效果更流暢、不卡頓。
		同時，translateZ(0) 會創造一個新的「複合圖層」（compositing layer），避免和其他元素渲染互相干擾。

	z-index: 1;
	
		z-index 是控制元素的「層級」，數字越大會疊在越上面。
		這裡設定 1 表示 .bg-fuji 會在層級較低的位置，讓後面像五重塔或文字等能蓋在它上面。

	.pagoda {
		opacity: 0;
		transition: opacity 2s ease;
		z-index: 2;
	}


	opacity: 0;
		
		初始狀態設為透明，讓五重塔一開始看不見。

	transition: opacity 2s ease;
		
		設定 opacity 屬性改變時，會在 2 秒內以「ease」的緩動曲線（慢進慢出）平滑過渡。
		這樣當你用 JavaScript 把 opacity 改成 1（或加上 .visible class）時，五重塔就會漸漸淡入顯示。

	z-index: 2;
		層級比 .bg-fuji 高，讓五重塔會顯示在背景富士山圖上面。
	
------

	gsap.timeline({
	  scrollTrigger: {
		trigger: "#teaSection",
		start: "top 80%",
		toggleActions: "play none none reverse"
	  }
	})
	
	.from(".text-group p:nth-child(1)", {
	  opacity: 0,
	  x: -40,
	  y: -20,
	  duration: 1,
	  ease: "power2.out"
	})
	
	.from(".text-group p:nth-child(2)", {
	  opacity: 0,
	  x: -60,
	  y: 10,
	  duration: 1,
	  ease: "power2.out"
	}, "-=0.6")
	
	.from(".text-group p:nth-child(3)", {
	  opacity: 0,
	  x: -30,
	  y: -10,
	  duration: 1,
	  ease: "power2.out"
	}, "-=0.5");


	分段解釋：
🔹 gsap.timeline({...})
	
		這是建立一個動畫時間軸，GSAP 會依照時間順序播放 .from(...) 動畫。
		你可以做 序列動畫（逐步錯落）或用 "-=0.6" 等方式來做 部分重疊動畫。


	scrollTrigger: {...}
	
		這是 ScrollTrigger 的設定，用來在你滾動到某個區域時才觸發動畫。

		trigger: "#teaSection" -> 意思是當滾動到 #teaSection 這個 <section> 區塊時，觸發動畫。

		start: "top 80%" -> 當 #teaSection 的「頂部」進入視窗「80% 高度」的位置時，觸發動畫。

		toggleActions: "play none none reverse"

			設定滾動行為：

				play：下滑觸發動畫

				none：不做事（當滾動回到上方時不會重新播放）

				reverse：往上滾會倒轉動畫（你也可以改成 "play none none none" 不倒退）

	.from(".text-group p:nth-child(1)", {...})
	
		這是說「讓第一個 <p> 從這些狀態開始動畫進場」：
		
			opacity: 0       // 初始為透明
			
			x: -40           // 向左偏移 40px
			
			y: -20           // 向上偏移 20px
			
			duration: 1      // 動畫持續 1 秒
			
			ease: "power2.out"  // 動畫緩和效果：開始快，結尾慢
			
			這樣的效果就是從左上角淡入滑進來的感覺。
			
		第二、三個 .from(...) 帶有 " -=0.6" 和 " -=0.5"
			
			這是控制「動畫時間軸的重疊」：	
			
			"-=0.6" -> 意思是「比前一段動畫早 0.6 秒結束前就開始」，所以會稍微重疊、錯落入場，看起來不會一個結束才一個出現，而是層次交錯。
			
		第二句動畫：	
			
			.from(".text-group p:nth-child(2)", {
			  opacity: 0,
			  x: -60,
			  y: 10,
			  ...
			}, "-=0.6")

			更大的 x 偏移：表示從更左邊來

			y: 10：從下方偏移進來

			✅ 第二句比第一句位置偏得更多，看起來層次更豐富
			
		第三句動畫：

			.from(".text-group p:nth-child(3)", {
			  opacity: 0,
			  x: -30,
			  y: -10,
			  ...
			}, "-=0.5")

			x: -30、y: -10：偏移小一點，讓它顯得靠近畫面

			"-=0.5"：比前一段再晚一點進來，錯落更自然
			
			
		整體動畫效果回顧：
		
		第幾句	起始位置	動畫延遲	效果
		
		第一句	左上偏移	無延遲	最早進場
		
		第二句	更偏左 + 底下	快接在第一句後面	較誇張的滑入感
		
		第三句	左上偏少	最晚入場	收尾，讓視覺有節奏感	
			

		// 文字依序進場
		gsap.utils.toArray("#teaSection .text-group p").forEach((el, i) => {
			gsap.to(el, {
				scrollTrigger: {
					trigger: el,
					start: "top 85%",
					toggleActions: "play none none reverse",
				},
				opacity: 1,
				x: 0,
				duration: 1,
				delay: i * 0.2,
				ease: "power2.out"
			});
		});

------

		.transition-text {
		  opacity: 0;
		  transform: translateY(30px);
		  transition: opacity 1s ease, transform 1s ease;
		}

		.transition-text.visible {
		  opacity: 1;
		  transform: translateY(0);
		}

		屬性											說明
		
		opacity: 0;									元素一開始完全透明，不可見。
		
		transform: translateY(30px);			元素一開始向下偏移 30px，看起來像是「下面浮上來」。
		
		transition: ...								定義當 CSS 屬性改變時，過渡效果該怎麼運作：
		
		- opacity 1s ease: 						透明度在 1 秒內用 ease 曲線變化。
		
		- transform 1s ease: 					位移效果也在 1 秒內完成。
		
		.visible	是 Intersection Observer 	偵測到元素出現在畫面中時加上的類別。
		
		.visible 中的 opacity: 1;					讓元素完全不透明、顯示出來。
		
		.visible 中的 translateY(0);				讓位移變成「原位」，也就是往上移回來。

---------
	.text_group_3 p {
        display: flex; 					把段落 <p> 設定成 Flex 容器，這通常是要讓內容（例如文字、span 等子元素）更好控制對齊或排列方式。
        flex-direction: column;		子元素會垂直堆疊排列，不過在這裡直書模式會影響實際呈現。
        align-items: flex-start;      靠左對齊 Flex 子項目，但由於 writing-mode 是垂直直書，這邊的 "左" 實際上是視覺上的「頂端」。
        position: absolute;			將元素絕對定位，根據最近的 position: relative 父層來定位。
        left: 90vw;						將元素水平放置在視窗寬度的 90% 處，也就是幾乎貼近右側邊緣。
        top: -40vh;						垂直位置設為視窗高度往上 40% 的位置（可能為了做進場動畫或視覺對齊）
        height: 110vh;
        justify-content: center;
        writing-mode: vertical-rl;  /* 直書，從右到左 */
        text-align: right;
        font-size: 2rem;
        color: rgb(46, 92, 0);
        margin: 1rem 0;
        margin-bottom: 1.5rem;
        opacity: 0;
        text-shadow: 1px 1px 1px rgba(6, 34, 0, 0.7);
        /*transform: translateX(-50px);  GSAP 會疊加新的 transform，而不是取代！ */
     }









